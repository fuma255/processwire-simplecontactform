<?php

/**
*
* By Tabea David
*
*/

/**
*
* SimpleContactForm
*
* See README.md for usage instructions.
*
* @author Tabea David <info@justonestep.de>
* @version 0.0.6
* @copyright Copyright (c) 2014
* @see https://github.com/justonestep/processwire-simplecontactform
* @see http://www.processwire.com
*/

/**
* Class SimpleContactForm
*/
class SimpleContactForm extends WireData implements Module, ConfigurableModule {

  /**
   * @field array Default config values
   */
  protected static $defaults = array(
    'fullName' => '',
    'emailTo' => '',
    'emailSubject' => 'New Web Contact Form Submission',
    'successMessage' => 'Thank you, your submission has been sent.',
    'errorMessage' => 'Please verify the data you have entered.',
    'emailServer' => 'noreply@server.com',
    'allFields' => 'fullName,email,message',
    'requiredFields' => 'fullName,email,message',
    'emailField' => 'email',
    'saveMessages' => true,
    'antiSpamTimeMin' => '5',
    'antiSpamTimeMax' => '90',
    'antiSpamPerDay' => '3',
    'antiSpamExcludeIps' => '127.0.0.1',
    'useTwig' => false
  );

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Simple Contact Form',
      'summary' => 'Just a simple contact form using Twig (TemplateTwigReplace). Not more and not less.',
      'version' => 6,
      'href' => 'https://github.com/justonestep/processwire-simplecontactform',
      'singular' => true,
      'autoload' => false,
    );
  }

  /**
   * Retrieves the list of config input fields
   *
   * Implementation of the ConfigurableModule interface
   *
   * @param array $data The config data
   * @return InputfieldWrapper
   * @see http://processwire.com/apigen/class-ConfigurableModule.html
   */
  public static function getModuleConfigInputfields(array $data) {
    $fields = new InputfieldWrapper();
    $modules = wire('modules');

    // default config values
    $data = array_merge(self::$defaults, $data);

    $settings = array(
      'saveMessages' => array(
        'type' => 'InputfieldCheckbox',
        'description' => 'Save Messages',
        'checked' => empty($data['saveMessages']) ? '' : 'checked',
        'columnWidth' => 50
      ),
      'useTwig' => array(
        'type' => 'InputfieldCheckbox',
        'description' => 'Check if you use Twig as template engine',
        'checked' => empty($data['useTwig']) ? '' : 'checked',
        'columnWidth' => 50
      ),
      'fullName' => array(
        'type' => 'InputfieldText',
        'description' => 'Full name of the recipient',
        'size' => 45,
        'placeholder' => 'firstname lastname',
        'columnWidth' => 33
      ),
      'emailTo' => array(
        'type' => 'InputfieldText',
        'description' => 'E-mail address of the recipient',
        'size' => 45,
        'placeholder' => 'xxx@xxx.xx',
        'columnWidth' => 33
      ),
      'emailSubject' => array(
        'type' => 'InputfieldText',
        'description' => 'E-Mail subject',
        'size' => 45,
        'columnWidth' => 34
      ),
      'emailServer' => array(
        'type' => 'InputfieldText',
        'description' => 'Server address',
        'size' => 45,
        'columnWidth' => 33
      ),
      'successMessage' => array(
        'type' => 'InputfieldText',
        'description' => 'Success message',
        'size' => 45,
        'columnWidth' => 33
      ),
      'errorMessage' => array(
        'type' => 'InputfieldText',
        'description' => 'Error message',
        'size' => 45,
        'columnWidth' => 34
      ),
      'allFields' => array(
        'type' => 'InputfieldTextarea',
        'description' => 'Comma-separated list of all fields',
        'rows' => 2,
        'columnWidth' => 33
      ),
      'requiredFields' => array(
        'type' => 'InputfieldTextarea',
        'description' => 'Comma-Seperated list of required fields',
        'rows' => 2,
        'columnWidth' => 33
      ),
      'emailField' => array(
        'type' => 'InputfieldText',
        'description' => 'field, which should be validated as an E-mail address',
        'size' => 45,
        'columnWidth' => 34
      ),
      'antiSpamTimeMin' => array(
        'type' => 'InputfieldText',
        'description' => 'It parses the time the user needs to fill out the form. If the time is below a minimum time, the submission is treated as Spam.',
        'size' => 3,
        'columnWidth' => 25
      ),
      'antiSpamTimeMax' => array(
        'type' => 'InputfieldText',
        'description' => 'It parses the time the user needs to fill out the form. If the time is over a maximum time, the submission is treated as Spam.',
        'size' => 3,
        'columnWidth' => 25
      ),
      'antiSpamPerDay' => array(
        'type' => 'InputfieldText',
        'description' => 'How often the form is allowed to be submitted by a single IP address in the last 24 hours.',
        'size' => 3,
        'columnWidth' => 25
      ),
      'antiSpamExcludeIps' => array(
        'type' => 'InputfieldText',
        'description' => 'Comma-Seperated list of IP addresses to be excluded from IP filtering.',
        'size' => 45,
        'columnWidth' => 25
      ),
    );

    // assign fields
    foreach ($settings as $name => $s) {
      $field = $modules->get($s['type']);
      $field->name = $name;
      $field->label = $name;
      $field->value = $data[$name];

      foreach ($s as $key => $val) {
        if ($key != 'type') {
          $field->{$key} = $val;
        }
      }

      $fields->append($field);
    }

    return $fields;
  }

  /**
   * Instance of Page, that we use to hold our submitted contact info.
   *
   */
  protected $contactPage;

  /**
   * Instance of InputfieldForm that we use to hold our form fields.
   *
   */
  protected $form;

  /**
   * Initialize the module
   * Initialize a new web contact form
   *
   * Implementation of the Module interface
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   *
   * @see http://processwire.com/apigen/class-Module.html
   *
   * @param Template $template Template object holding the form's fields.
   *
   */
  public function init() {
    if (!empty($this->modules->getInstall('SimpleContactForm')->data)) {
      // assign API variables to make things a little easier
      $this->templates = wire('templates');
      $this->input = wire('input');
      $this->sanitizer = wire('sanitizer');
      $this->pages = wire('pages');
      $this->modules = wire('modules');

      // convert comma separated values to array
      $this->requiredFields = explode(',', $this->requiredFields);
      $this->allFieldsExtended = explode(',', $this->allFields . ',date,ip');
      $this->allFields = explode(',', $this->allFields);
      $this->pageName = 'scf-messages';
      $this->repeaterName = 'repeater_scfmessages';

      // create a new template for contactPage
      $tName = $this->createContactPage();

      // check whater to save the received messages
      if (!empty($this->saveMessages)) {
        $this->createReceivedMessagesPage();
      }
    }
  }

  private function checkFilePermissions() {
    $currentMode = substr(sprintf('%o', fileperms($this->config->paths->templates)), -4);
    if ($currentMode != '0777') {
      chmod($this->config->paths->templates, 0777);
      $this->message('Changed mode for ' . $this->config->paths->templates . ' from ' . $currentMode . ' to 0777 to be able to create the necessary template files.');
    }
  }

  /**
   * Render
   *
   */
  public function ___render() {
    if (!$this->contactPage->template) throw new WireException("No Template was found.");

    // validate form and send mail
    if (!empty($this->input->post->submitted)) {
      $this->sendMail();
    }

    return $this->contactPage->render();
  }

  /**
   * Send Mail
   *
   */
  public function sendMail() {
    $error = false;

    // sanitize form values
    $form = array();

    $this->antiSpam();

    // first check valid mail address
    if (!empty($this->emailField)) {
      $form[$this->emailField] = $this->sanitizer->email($this->input->post->{$this->emailField});
    }

    // second check required fields
    foreach ($this->requiredFields as $requiredField) {
      if ($requiredField === $this->emailField) {
        $form[$requiredField] = $this->sanitizer->email($this->input->post->{$requiredField});
      } else {
        $form[$requiredField] = $this->sanitizer->text($this->input->post->{$requiredField});
      }
    }

    // validate required/email fields
    // email fields do not need to be validated here, sanitizer does that already!
    foreach ($form as $field => $value) {
      if (empty($value)) {
        $error = true;
        continue;
      }
    }

    // no errors - send mail and save message in database
    if ($error === false) {
      $emailTo = $this->data['fullName'] . ' <' . $this->data['emailTo'] . '>';
      // $date = date('d.m.Y - H:i');
      $date = new DateTime();

      $message = array();
      foreach ($this->allFields as $inputfield) {
        $message[] = $inputfield . ': ' . $this->sanitizer->text($this->input->post->{$inputfield});
      }
      $message[] = 'Date: ' . $date->format('Y-m-d H:i:s');

      $header = "From: " . $this->data['emailServer'] . "\r\n" . "Reply-To: " . $form[$this->emailField] . "\r\n";

      mail($emailTo, $this->data['emailSubject'], implode("\r\n", $message), $header);
      $this->input->post->success = $this->data['successMessage'];

      // edit page
      if (!$this->pages->findOne('name=' . $this->pageName) instanceof Pages) {
        $page = $this->pages->findOne('name=' . $this->pageName);
        $newEntry = $page->{$this->repeaterName}->getNew();

        foreach ($this->allFields as $inputfield) {
          $newEntry->{'scf_' . $inputfield} = $this->sanitizer->text($this->input->post->{$inputfield});
        }
        $newEntry->scf_date = $date->getTimestamp();
        $newEntry->scf_ip = $_SERVER['REMOTE_ADDR'];

        $newEntry->save();
        $page->setOutputFormatting(false);
        $page->save();
      }

      // don't send mail twice, deactivate condition
      $this->input->post->submitted = NULL;
    }

    $this->input->post->error = $error;
  }

  /**
   *  spam protection
   *
   */
  protected function antiSpam() {
    $spam = false;
    $bptUserAgents = '#w3c|google|slurp|msn|yahoo|y!j|altavista|ask|spider|search|bot|crawl|usw#i';
    $currentIp = $_SERVER['REMOTE_ADDR'];
    $excludeIps = explode(',', $this->antiSpamExcludeIps);

    $dateDiff = 0;
    if (!empty($this->input->post->{'scf-date'})) {
      $dateDiff = time() - (int)$this->input->post->{'scf-date'};
    }

    // evaluate honeypot
    if (!empty($this->input->post->{'scf-website'})) {
      $spam = true;
    // } elseif (count($this->allFields) + 4 !== count($this->input->post)) {
      // check number of fields
      // $spam = true;
    } elseif (preg_match($bptUserAgents, $_SERVER['HTTP_USER_AGENT'])) {
      // check HTTP_USER_AGENT
      $spam = true;
    } elseif ($_SERVER['HTTP_REFERER'] === '' && $_SERVER['HTTP_USER_AGENT'] === '') {
      // check HTTP_REFERER und HTTP_USER_AGENT
      $spam = true;
    } elseif (!in_array($currentIp, $excludeIps)) {
      // control how often the form is allowed to be submitted by a single IP address
      $receivedMessages = $this->pages->findOne('name=' . $this->pageName)->{$this->repeaterName};
      $dateSub = new DateTime();
      $dateSub->sub(new DateInterval('P1D'));
      $totalLast24h = $receivedMessages->find('scf_ip!="", scf_date>=' . $dateSub->getTimestamp() . ', scf_ip=' . $currentIp)->count();

      if ($totalLast24h >= $this->antiSpamPerDay) {
        $spam = true;
      }
    } elseif ($dateDiff <= $this->antiSpamTimeMin || $dateDiff >= $this->antiSpamTimeMax) {
      // check date difference
      $spam = true;
    }

    if ($spam === true) {
      $this->session->redirect($this->pages->get('/')->url);
    }
  }

  /**
   * Build the contact form and add fields to it
   *
   */
  protected function buildForm() {
    // create the contact form
    $form = $this->modules->get("InputfieldForm");
    $form->method = 'post';
    $form->action = './';
    $form->class = 'js-simple_contact_form';

    // add the fields as simple input fields to the form
    foreach ($this->allFields as $inputfield) {
      $singleField = $this->modules->get('InputfieldText');
      $singleField->name = $inputfield;
      $singleField->placeholder = $inputfield;

      if ($this->useTwig === true) {
        $singleField->initValue = '{{input.' . $inputfield . '}}';
      } else {
        $singleField->initValue = '<?= $input->' . $inputfield . '; ?>';
      }

      if (in_array($inputfield, $this->requiredFields)) $singleField->required = true;
      $form->add($singleField);
    }

    // add honeypot (spam protection)
    $honeyField = $this->modules->get('InputfieldText');
    $honeyField->name = 'scf-website';
    $honeyField->initValue = '';
    $form->add($honeyField);

    $scfDate = ($this->useTwig === true) ? '{{\'now\'|date(\'U\')}}' : '<?= time(); ?>';
    foreach (array('submitted' => '1', 'scf-date' => $scfDate) as $name => $val) {
      // add hidden field to track wheater the form was submitted and to save current timestamp
      $hiddenField = $this->modules->get('InputfieldHidden');
      $hiddenField->name = $name;
      $hiddenField->initValue = $val;
      $form->add($hiddenField);
    }

    // add a submit button
    $submit = $this->modules->get("InputfieldSubmit");
    $submit->name = "submit";
    $submit->value = 'Submit';
    $form->add($submit);

    return $form;
  }

  /**
  * create a page for holding the form fields
  *
  */
  protected function createContactPage() {
    $this->contactPage = new Page();
    $tName = 'simple_contact_form';

    // create a new template for contactPage - database
    if (!$this->templates->get($tName) instanceof Template) {
      // new fieldgroup
      $fg = new Fieldgroup();
      $fg->name = $tName;
      $fg->add($this->fields->get('title')); // needed title field
      $fg->save();

      $contactTemplate = new Template();
      $contactTemplate->name = $tName;
      $contactTemplate->fieldgroup = $fg; // add the fieldgroup
      $contactTemplate->noChildren = 1;
      $contactTemplate->slashUrls = 1;
      $contactTemplate->noPrependTemplateFile = 1;
      $contactTemplate->noAppendTemplateFile = 1;
      $contactTemplate->save();
    }

    $ext = ($this->useTwig === true) ? '.twig' : '.php';
    $tPath = $this->config->paths->templates . $tName . $ext;
    if (!file_exists($tPath)) {
      // add form
      $form = $this->buildForm();
      $content = $this->getFormTemplateContent($form);

      // create template file
      $template = fopen($tPath, 'w');
      chmod($tPath, 0766);
      fwrite($template, html_entity_decode(implode("\n", $content)));
      fclose($template);

      if (!file_exists($tPath)) {
        throw new WireException('The template file could not be created. Check File Mode for `site/templates` (has to be 0777).');
      }
    } else {
      $contactTemplate = $this->templates->get($tName);
    }

    // set template
    $this->contactPage->set('template', $tName);
  }


  private function getFormTemplateContent($form) {
    // combine template parts
    if ($this->useTwig === true) {
      $content = array(
        '<div class="">',
        '{% if input.success %}',
        '<p class="success scf-state">{{input.success}}</p>',
        '{% else %}',
        $form->render(),
        "\n\n" . '{% if input.error %}',
        '<p class="error scf-state">' . $this->errorMessage . '</p>',
        '{% endif %}',
        '{% endif %}',
        '</div>'
      );
    } else {
      $content = array(
        '<div class="">',
        '<?php if ($input->success) { ?>',
        '<p class=\'success scf-state\'><?= $input->success ?></p>',
        '<?php } else { ?>',
        $form->render(),
        "\n\n",
        '<?php if ($input->error) { ?>',
        '<p class=\'error scf-state\'>' . $this->errorMessage . '</p>',
        '<?php }',
        '} ?>',
        '</div>'
      );
    }

    return $content;
  }


  private function getTableTemplateContent() {
    $table = array(
      'head' => array(),
      'content' => array()
    );

    foreach($this->allFieldsExtended as $inputfield) {
      if ($this->useTwig === true) {
        $table['head'][] = '<th>' . ucfirst($inputfield) . '</th>';

        if ($inputfield === $this->emailField) {
          $table['content'][] = '<td><a href="mailto:{{message.scf_' . $inputfield . '}}">{{message.scf_' . $inputfield . '}}</a></td>';
        } else {
          $table['content'][] = '<td>{{message.scf_' . $inputfield . '}}</td>';
        }
      } else {
        $table['head'][] = '<th>' . ucfirst($inputfield) . '</th>';

        $input = "scf_{$inputfield}";
        if ($inputfield === $this->emailField) {
          $table['content'][] = '<td><a href=\'mailto:<?= $message->' . $input . '; ?>\'><?= $message->' . $input . '; ?></a></td>';
        } else {
          $table['content'][] = '<td><?= $message->' . $input . '; ?></td>';
        }
      }
    }

    return $table;
  }

  private function getMessagesTemplateContent($table, $templateName, $repeaterName) {
    // combine template parts
    if ($this->useTwig === true) {
      $content = array(
        '{% if user.hasRole("superuser") %}',
        '{% set currentPage = pages.findOne("template=' . $templateName . '") %}',
        '<h1>{{currentPage.title}}</h1>',
        '<table>',
        '<thead>',
        '<tr>',
        implode("\n", $table['head']),
        '</tr>',
        '</thead>',
        '<tbody>',
        '{% for message in currentPage.' . $repeaterName . '.sort("-scf_date") %}',
        '<tr>',
        implode("\n", $table['content']),
        '</tr>',
        '{% endfor %}',
        '</tbody>',
        '</table>',
        '{% else %}',
        '{{session.redirect(pages.get("/").url)}}',
        '{% endif %}'
      );

    } else {
      $content = array(
        '<?php',
        'if ($user->hasRole("superuser")) {',
        '$currentPage = $this->pages->findOne("template=\'' . $templateName . '\'"); ?>',
        '<h1><?= $currentPage->title; ?></h1>',
        '<table>',
        '<thead>',
        '<tr>',
        implode("\n", $table['head']),
        '</tr>',
        '</thead>',
        '<tbody>',
        '<?php foreach ($currentPage->' . $repeaterName . '->sort(\'-scf-date\') as $message) { ?>',
        '<tr>',
        implode("\n", $table['content']),
        '</tr>',
        '<?php } ?>',
        '</tbody>',
        '</table>',
        '<?php } else { ',
        '$session->redirect($pages->get("/")->url);',
        '}?>'
      );
    }

    return $content;
  }

  /**
  * create a page for holding the received messages
  *
  */
  protected function createReceivedMessagesPage() {
    $templateName = 'simple_contact_form_messages';

    if (!$this->templates->get($templateName) instanceof Template) {
      // create repeater field
      $repeaterField = $this->createRepeater();

      // create fieldgroup
      $fg = new Fieldgroup();
      $fg->name = $templateName;
      $fg->add($this->fields->get('title')); // needed title field
      $fg->add($repeaterField); // needed title field
      $fg->save();

      // create new template
      $t = new Template();
      $t->name = $templateName;
      $t->fieldgroup = $fg; // add the fieldgroup
      $t->noChildren = 1;
      $t->noPrependTemplateFile = 1;
      $t->noAppendTemplateFile = 1;
      $t->save();

      // create page
      $p = new Page();
      $p->template = $t;
      $p->parent = $this->pages->get('/');
      $p->name = $this->pageName;
      $p->title = $this->pageName;
      $p->addStatus(Page::statusHidden);
      $p->addStatus(Page::statusLocked);
      $p->save();
    }

    $ext = ($this->useTwig === true) ? '.twig' : '.php';
    $tPath = $this->config->paths->templates . $templateName . $ext;
    if (!file_exists($tPath)) {
      $table = $this->getTableTemplateContent();
      $content = $this->getMessagesTemplateContent($table, $templateName, $this->repeaterName);

      // create template file
      $template = fopen($tPath, 'w');
      chmod($tPath, 0766);
      fwrite($template, html_entity_decode(implode("\n", $content)));
      fclose($template);

      if (!file_exists($twigname)) {
        throw new WireException('The template file could not be created. Check File Mode for `site/templates` (has to be 0777).');
      }
    }
  }

  /**
   * Creates a repeater field with associated fieldgroup, template, and page
   *
   * @return Returns the new Repeater field
   *
   */
  public function createRepeater() {
    // create fields for repeater
    foreach ($this->allFieldsExtended as $name) {
      $f = new Field();
      $f->type = $this->modules->get('FieldtypeText');
      $f->name = 'scf_' . $name;
      $f->label = 'SCF - ' . ucfirst($name);
      $f->columnWidth = '33';
      $f->save();
    }

    // create field
    $repeaterField = new Field();
    $repeaterField->type = $this->modules->get("FieldtypeRepeater");
    $repeaterField->name = $this->repeaterName;
    $repeaterField->label = 'SCF - ' . $this->repeaterName;
    $repeaterField->repeaterReadyItems = 3;

    // create fieldgroup
    $repeaterFg = new Fieldgroup();
    $repeaterFg->name = 'repeater_' . $this->repeaterName;

    // add fields to fieldgroup
    foreach ($this->allFieldsExtended as $field) {
      $repeaterFg->append($this->fields->get('scf_' . $field));
    }

    $repeaterFg->save();

    // create template
    $repeaterT = new Template();
    $repeaterT->name = 'repeater_' . $this->repeaterName;
    $repeaterT->noChildren = 1;
    $repeaterT->noParents = 1;
    $repeaterT->noGlobal = 1;
    $repeaterT->slashUrls = 1;
    $repeaterT->flags = 8;
    $repeaterT->fieldgroup = $repeaterFg;

    $repeaterT->save();

    // setup page for the repeater
    $repeaterPage = 'for-field-' . $repeaterField->id;
    $repeaterField->parent_id = $this->pages->get('name=' . $repeaterPage)->id;
    $repeaterField->template_id = $repeaterT->id;
    $repeaterField->repeaterReadyItems = 3;

    // now, add the fields directly to the repeater field
    foreach($this->allFieldsExtended as $field) {
      $repeaterField->repeaterFields = $this->fields->get('scf_' . $field);
    }

    $repeaterField->save();

    return $repeaterField;
  }

  /**
  *
  * install routine
  */
  public function ___install() {
    // check file permissions
    $this->checkFilePermissions();
  }

}
